#                                                                   PC
main:   addi x6,  x0,  0xB  # put B in register x6                 0
        addi x7,  x0,  0x5  # put 5 in register x7                 4
        addi x8,  x0,  0x3  # put 1 in register x8                 8
        or   x9,  x6,  x8   # x9  = x6  | x8  = B | 3 = B          C
        and  x10, x7,  x8   # x10 = x7  & x8  = 5 & 3 = 1          10
        add  x11, x10, x9   # x11 = x10 + x9  = 1 + B = C          14
        beq  x8,  x7,  L2   # will not branch                      18
        slt  x12, x9,  x11  # x12 = (x9 < x11)? = (B < C) = 1      1C
        beq  x10, x12, L1   # will branch                          20
        addi x10, x0,  0x6  # will not be reached                  24
L1:     and  x13, x11, x7   # x13 = x11 & x7  = C & 5 = 4          28
        add  x14, x13, x11  # x14 = x13 + x11 = 4 + C = 16         2C
        sw   x14, 8(x12)    # address (1 + 8) --> [9] = x14 = 16   30 
        lw   x15, -2(x9)    # address (B - 3) --> x15 = [9]        34
        jal  x16, L3        # jump to L3                           38
L2:     and  x10, x7,  x8   # x10 = x7  & x8  = 5 & 3 = 1          3C
L3:     add  x11, x10, x9   # x11 = x10 + x9  = 1 + B = C          40



/*
addi:
    immediate         rs1     func3   rd     opcode
    0000_0000_1011   00000     000   00110   0010011
    00B00313  -------  addi x6,  x0,  B

    0000_0000_0101   00000     000   00111   0010011
    00500393  -------  addi x7,  x0,  5

    0000_0000_0011   00000     000   01000   0010011
    00300413  -------  addi x8,  x0,  3

    0000_0000_0110   00000     000   01010   0010011
    00600513  -------  addi x10, x0,  6

and/or/add:
     func7     rs2     rs1    func3   rd       opcode   
    0000_000  0_1000  00110    110   01001     0110011
    008364B3  ------- or   x9,  x6,  x8

    0000_000  0_1000  00111    111   01010     0110011
    0083F533  ------- and  x10, x7,  x8

    0000_000  0_1001  01010    000   01011     0110011
    009505B3  ------- add  x11, x10, x9

    0000_000  0_0111  01011    111   01101     0110011
    0075F6B3  ------- and  x13, x11, x7

    0000_000  0_1011  01101    000   01110     0110011
    00B68733  ------- add  x14, x13, x11

beq:
    immed12,10:5     rs2     rs1    func3   immed4:1,11   opcode   
    0000_001       0_0111   01000    000     0100_0       1100011
    02740463  ------- beq  x8,  x7,  L2
    L2: at PC = 3C , 14 + 28 = 3C
    offset = 00101000

    0000_000       0_1100   01010    000     0100_0       1100011
    00C50463  ------- beq  x10, x12, L1
    L1: at PC = 24 , 1C + 8 = 24
    offset = 00001000

sw:
    immed_11:5    rs2    rs1     func3    immed_4:0    opcode
    0000_000     01110  01100     010      01000      0100011
    00E62423  ------- sw   x14, 8(x12)

lw: 
    immed_11:0        rs1     func3    rd      opcode
    1111_1111_1110   01001     010    01111    0000011
    FFE4A783  ------- lw   x15, -2(x9)

slt:
     func7     rs2     rs1    func3   rd       opcode   
    0000_000  0_1011  01001    010   01100     0110011
    00B4A633  ------- slt  x12, x9,  x11

jump:
    imm_20, 10:1 ,11 ,19:12    rd    opcode
    0 0000000100 0 00000000  10000   1101111
    0080086F  ------- jal  x16, L3 --> +8 (1000)

*/


0x00B00313
0x00500393
0x00300413
0x008364B3
0x0083F533
0x009505B3
0x02740463
0x00B4A633
0x00C50463
0x00600513
0x0075F6B3
0x00B68733
0x00E62423
0xFFE4A783
0x0080086F
0x0083F533
0x009505B3